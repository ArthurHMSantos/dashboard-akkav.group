import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
import numpy as np

from PIL import Image
from filter import filter_dataset
from survey import survey

# Streamlit page configs
st.set_page_config(
    page_title="BankChurners Dashboard",
    page_icon="ü¶à",
    layout="wide",
    initial_sidebar_state="expanded",
)
st.set_option('deprecation.showPyplotGlobalUse', False)

# Dataset source
dataset = pd.read_csv("./assets/BankChurners.csv")
dataset = dataset.iloc[:, :-2]

# Page title
st.markdown("<h1 style='text-align: center;color: #c9c904'>Credit Card Customers</h1> ", unsafe_allow_html=True)
st.markdown("***")

# Sidebar
st.sidebar.title("Menu")
showdataset = st.sidebar.checkbox("Visualizar dataset")

if showdataset:
    st.sidebar.title("Filtrar Dataset")
    st.write("Utilize o menu lateral para filtrar o dataset.")
    st.dataframe(filter_dataset(dataset))

lowestcredit = dataset[dataset['Credit_Limit'] <= 2500]['Education_Level'].value_counts()
lowcredit = dataset[dataset['Credit_Limit'] <= 4000][dataset['Credit_Limit'] > 2500]['Education_Level'].value_counts()
mediumcredit = dataset[dataset['Credit_Limit'] <= 8000][dataset['Credit_Limit'] > 4000]['Education_Level'].value_counts()
highcredit = dataset[dataset['Credit_Limit'] <= 17000][dataset['Credit_Limit'] > 8000]['Education_Level'].value_counts()
highestcredit = dataset[dataset['Credit_Limit'] > 17000]['Education_Level'].value_counts()



# options = dataset

category_names = ['Uneducated','High School', 'College', 'Graduate',  'Post-Graduate', 'Doctorate']
results = {
    'At√© 2.500 de cr√©dito': [lowestcredit.filter(regex='Uneducated', axis=0)[0], lowestcredit.filter(regex='High School', axis=0)[0], lowestcredit.filter(regex='College', axis=0)[0], lowestcredit.filter(regex='Graduate', axis=0)[0],  lowestcredit.filter(regex='Post-Graduate', axis=0)[0],  lowestcredit.filter(regex='Doctorate', axis=0)[0]],
    'Entre 2.500 e 4000': [lowcredit.filter(regex='Uneducated', axis=0)[0], lowcredit.filter(regex='High School', axis=0)[0], lowcredit.filter(regex='College', axis=0)[0], lowcredit.filter(regex='Graduate', axis=0)[0],  lowcredit.filter(regex='Post-Graduate', axis=0)[0],  lowcredit.filter(regex='Doctorate', axis=0)[0]],
    'Entre 4.000 e 8000': [mediumcredit.filter(regex='Uneducated', axis=0)[0], mediumcredit.filter(regex='High School', axis=0)[0], mediumcredit.filter(regex='College', axis=0)[0], mediumcredit.filter(regex='Graduate', axis=0)[0],  mediumcredit.filter(regex='Post-Graduate', axis=0)[0],  mediumcredit.filter(regex='Doctorate', axis=0)[0]],
    'Entre 8.000 e 17000': [highcredit.filter(regex='Uneducated', axis=0)[0], highcredit.filter(regex='High School', axis=0)[0], highcredit.filter(regex='College', axis=0)[0], highcredit.filter(regex='Graduate', axis=0)[0],  highcredit.filter(regex='Post-Graduate', axis=0)[0],  highcredit.filter(regex='Doctorate', axis=0)[0]],
    'Superior a 17000': [highestcredit.filter(regex='Uneducated', axis=0)[0], highestcredit.filter(regex='High School', axis=0)[0], highestcredit.filter(regex='College', axis=0)[0], highestcredit.filter(regex='Graduate', axis=0)[0],  highestcredit.filter(regex='Post-Graduate', axis=0)[0],  highestcredit.filter(regex='Doctorate', axis=0)[0]],
}



# Enable graphics
st.sidebar.title("Gr√°ficos")
enable_graphics = st.sidebar.checkbox("Habilitar gr√°ficos")

if enable_graphics:

    graph = st.sidebar.radio(" ", options=('Limite de cr√©dito por categoria de renda', 'Faixa de limite de cr√©dito por n√≠vel de escolaridade', 'Categoria de cart√£o de cr√©dito por g√™nero' , 'Limite de cr√©dito por coluna a ser selecionada', 'Clientes perdidos por coluna a ser selecionada', 'Gr√°fico de Caixa por coluna a ser selecionada'))

    if graph == 'Limite de cr√©dito por categoria de renda':

        credit_limit = dataset["Credit_Limit"].groupby(dataset["Income_Category"]).mean()

        st.markdown("<h2 style='text-align: center;color: #d87093'>Limite de Cr√©dito por Categoria de Renda</h2>", unsafe_allow_html=True)

        fig, ax = plt.subplots(figsize=(10, 6))
        sns.barplot(data=dataset, x=credit_limit.index, y=credit_limit.values,
                    palette="Set2", dodge=False, order=['Less than $40K', '$40K - $60K', '$60K - $80K', '$80K - $120K', '$120K +'])
        ax.set_ylabel("Limite de cr√©dito m√©dio")
        ax.set_xlabel("Categoria de renda")
        ax.set_title("Limite de Cr√©dito M√©dio por Categoria de Renda")
        ax.grid(axis='y', linestyle='--')

        st.write("Esse gr√°fico permite a visualiza√ß√£o do limite de cr√©dito m√©dio por categoria de renda.")

        st.pyplot(fig)

        st.write("√â poss√≠vel observar que a categoria de renda com maior limite de cr√©dito √© a de $$120K +, e a categoria de renda com menor limite de cr√©dito √© a de Less than $40K. Isso refor√ßa a ideia de que quanto maior a renda, maior o limite de cr√©dito nesse banco.")

        st.write(credit_limit)

        
    elif graph == 'Faixa de limite de cr√©dito por n√≠vel de escolaridade':

        st.markdown("<h3 style='text-align: center;color: #d87093'>Faixa de limite de cr√©dito por n√≠vel de escolaridade</h3> ", unsafe_allow_html=True)
        st.write("Esse gr√°fico permite a visualiza√ß√£o do limite de cr√©dito m√©dio por n√≠vel de escolaridade.")
        figure, axw = survey(results, category_names)
        st.pyplot(figure)
        st.write("Com esse gr√°fico, pode-se identificar se existe uma correla√ß√£o entre essas vari√°veis e se a institui√ß√£o financeira tem pol√≠ticas espec√≠ficas para determinados grupos. √â poss√≠vel observar se h√° diferen√ßas significativas entre os valores e se elas seguem um padr√£o, como, por exemplo, se o limite de cr√©dito aumenta √† medida que o n√≠vel de escolaridade aumenta. Essa an√°lise pode fornecer insights valiosos para a institui√ß√£o financeira em termos de ajustes nas pol√≠ticas de cr√©dito e adequa√ß√£o do p√∫blico-alvo.")
        st.write("No entanto, √© interessante observar que o n√≠vel de educa√ß√£o e o de renda n√£o s√£o vari√°veis independentes, pois, em geral, quanto maior o n√≠vel de educa√ß√£o, maior a renda. Portanto, √© poss√≠vel que a diferen√ßa entre os valores de limite de cr√©dito seja explicada, em parte, pela diferen√ßa de renda entre os grupos.")

    elif graph == 'Categoria de cart√£o de cr√©dito por g√™nero':

        st.markdown("<h3 style='text-align: center;color: #d87093'>Categoria de cart√£o de cr√©dito por g√™nero</h3>", unsafe_allow_html=True)
        st.write("Esses gr√°ficos permitem a visualiza√ß√£o da categoria de cart√£o de cr√©dito por g√™nero.")
        male = dataset["Card_Category"].where(dataset["Gender"] == "M").value_counts().values
        female =  dataset["Card_Category"].where(dataset["Gender"] == "F").value_counts().values
        card_categorys = (dataset["Card_Category"].value_counts()).index

        f = plt.figure()
        f.set_figwidth(4)
        f.set_figheight(2)
        plt.bar(card_categorys, female, color="#6495ED")
        plt.bar(card_categorys, male, bottom=female, color="#6A5ACD")
        plt.legend(["F", "M"])
        fig = plt.plot()
        st.pyplot(fig)

        st.markdown("<h4 style='text-align: center;color: #dab99c'>Escala maior</h3> ", unsafe_allow_html=True)
        plt.bar(card_categorys, female, color="#6495ED")
        plt.bar(card_categorys, male, bottom=female, color="#6A5ACD")
        plt.legend(["F", "M"])
        plt.ylim(0, 600)
        fig = plt.plot()
        st.pyplot(fig)

        st.write("Com base na an√°lise dos gr√°ficos relacionados √† categoria do cart√£o de cr√©dito por g√™nero, podemos observar que a distribui√ß√£o das categorias de cart√£o de cr√©dito entre homens e mulheres est√° relativamente equilibrada, com propor√ß√µes similares em todas as categorias. No entanto, √© importante destacar que a categoria do cart√£o de cr√©dito est√° diretamente relacionada ao limite de cr√©dito e, por consequ√™ncia, √† renda do titular do cart√£o. Ao analisarmos o gr√°fico que compara o limite de cr√©dito por categoria de renda, √© poss√≠vel notar que a maioria das mulheres no dataset n√£o possui renda anual superior a 60 mil d√≥lares, o que pode explicar a similaridade nas categorias de cart√£o de cr√©dito entre homens e mulheres. Este fato ressalta a import√¢ncia de considerar vari√°veis socioecon√¥micas ao analisar dados relacionados a cart√µes de cr√©dito e seus titulares.")

        st.write("Clientes homens por categoria de cart√£o de cr√©dito:")
        st.write(dataset["Card_Category"].where(dataset["Gender"] == "M").value_counts())
        st.write("Clientes mulheres por categoria de cart√£o de cr√©dito:")
        st.write(dataset["Card_Category"].where(dataset["Gender"] == "F").value_counts())

    elif graph == 'Limite de cr√©dito por coluna a ser selecionada':
        dataset = dataset.drop(['CLIENTNUM','Total_Relationship_Count', 'Total_Revolving_Bal', 'Avg_Open_To_Buy', 'Total_Amt_Chng_Q4_Q1', 'Total_Trans_Amt', 'Total_Trans_Ct', 'Total_Ct_Chng_Q4_Q1', 'Avg_Utilization_Ratio'], axis=1)
        eixoX = st.sidebar.selectbox("Selecione a coluna desejada:", dataset.columns.delete(0))
        
        credit_limit = dataset["Credit_Limit"].groupby(dataset[f"{eixoX}"]).mean()

        st.markdown(f"<h3 style='text-align: center;color: #d87093'>Gr√°fico interativo: Limite de cr√©dito X {eixoX}</h3> ", unsafe_allow_html=True)
        feg = plt.figure(figsize=(15,7))
        sns.barplot(data=dataset, x=credit_limit.index, y=credit_limit.values,
        palette="Set2", dodge=False)
        plt.ylabel("Limite de cr√©dito m√©dio")
        plt.xlabel(f"{eixoX}")

        st.write("Esse gr√°fico permite a visualiza√ß√£o do limite de cr√©dito m√©dio por coluna selecionada.")

        st.pyplot(feg)

        st.write("")
    
    elif graph == 'Clientes perdidos por coluna a ser selecionada':
        dataset = dataset.drop(['CLIENTNUM','Total_Relationship_Count', 'Total_Revolving_Bal', 'Avg_Open_To_Buy', 'Total_Amt_Chng_Q4_Q1', 'Total_Trans_Amt', 'Total_Trans_Ct', 'Total_Ct_Chng_Q4_Q1', 'Avg_Utilization_Ratio'], axis=1)

        eixoX = st.sidebar.selectbox("Selecione a coluna desejada:", dataset.columns.delete([0, 1]))

        st.markdown(f"<h3 style='text-align: center;color: #d87093'>Gr√°fico interativo: Clientes perdidos por {eixoX}</h3> ", unsafe_allow_html=True)
        
        attrited_customers = dataset["Attrition_Flag"].where(dataset["Attrition_Flag"] == 'Attrited Customer')

        data_eixoX = (dataset[f'{eixoX}'].value_counts()).index.tolist()
        data = []

        for d in data_eixoX:
            test = attrited_customers.where(dataset[f'{eixoX}'] == d).value_counts().values
            if test:
                data.append(attrited_customers.where(dataset[f'{eixoX}'] == d).value_counts().values[0])
            else:
                data.append(0)
        
        data = pd.Series(data)

        feg = plt.figure(figsize=(15,7))
        sns.barplot(data=dataset, x=data_eixoX, y=data.values,
        palette="Set2", dodge=False)
        plt.ylabel("Clientes perdidos")
        plt.xlabel(f"{eixoX}")
        st.pyplot(feg)

    elif graph == 'Gr√°fico de Caixa por coluna a ser selecionada':
        dataset = dataset.drop('CLIENTNUM', axis=1)
        eixoX = st.sidebar.selectbox("Selecione a coluna desejada:", dataset.select_dtypes(exclude='object').columns)

        st.write("Esse gr√°fico de caixa (boxplot) interativo permite a sele√ß√£o de uma coluna do dataset para analisar a distribui√ß√£o dos dados e a localiza√ß√£o de outliers.\n\n Essa ferramenta √© importante na an√°lise explorat√≥ria de dados, pois mostra a distribui√ß√£o dos dados, incluindo os valores m√≠nimo e m√°ximo, os quartis, a mediana e poss√≠veis outliers.")
        st.markdown(f"<h3 style='text-align: center;color: #d87093'>Gr√°fico interativo: Clientes perdidos por {eixoX}</h3> ", unsafe_allow_html=True)
        sns.set(style='whitegrid')
        plt.figure(figsize=(8,6))

        sns.boxplot(x=eixoX, data=dataset, color='purple', saturation=0.7)
        plt.title(f"Gr√°fico de Caixa: {eixoX}")
        plt.title(f'Distribui√ß√£o do {eixoX}', fontsize=16)
        plt.xlabel(f'{eixoX}', fontsize=14)
        plt.xticks(fontsize=12)

        st.pyplot()
        st.write("Ao analisarmos diferentes colunas com o gr√°fico de caixa, √© possivel tirar algumas conclus√µes.")
        st.write("Considerando a an√°lise dos gr√°ficos de caixa de colunas como a de idade dos clientes e do tempo de relacionamento com o banco, por exemplo, as quais apresentam poucos outliers, optou-se por n√£o excluir os outliers de colunas que apresentassem essa tend√™ncia, afinal como o n√∫mero de outliers era baixo, n√£o implicariam em mudan√ßas significativas na an√°lise explorat√≥ria dos dados.")
        st.write("J√° se analisarmos os gr√°ficos que apresentam bastante outliers, como a coluna de limite de cr√©dito, tamb√©m n√£o foi feita a retirada dos outliers devido √† impossibilidade de tratar essa grande quantidade de outliers sem influenciar no resultado da an√°lise de dados.")
        st.write("Outro exemplo de gr√°fico de caixa que pode ser encontrado √© o gr√°fico criado com n√∫mero de dependentes, onde n√£o foram identificados outliers, n√£o sendo necess√°rio nenhum tratamento.")

    else:
        st.write('Erro. Recarregue a p√°gina e tente novamente.')
        
if not enable_graphics and not showdataset:

    image = Image.open('./assets/Credit card-bro.png')

    col1, col2, col3 = st.columns([1,2,1])

    with col1:
        st.write("")

    with col2:
        st.image(image, width=350)

    with col3:
        st.write("")

    st.write("Este dataset consiste em dados de 10.000 usu√°rios de cart√£o de cr√©dito de um determinado", 
    "banco. Esses dados consistem em idade, sal√°rio, estado civil, n√≠vel de escolaridade, g√™nero, ",
    "entre outras informa√ß√µes relevantes.")

    st.write("O dataset foi obtido atrav√©s do seguinte link: (https://www.kaggle.com/datasets/sakshigoyal7/credit-card-customers)")